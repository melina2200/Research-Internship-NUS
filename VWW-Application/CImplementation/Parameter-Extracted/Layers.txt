
fn (%input: Tensor[(1, 96, 96, 1), int8], %v_param_1: Tensor[(3, 3, 1, 8), int8], %v_param_2: Tensor[(8), int32], %v_param_3: Tensor[(3, 3, 8, 1), int8], %v_param_4: Tensor[(8), int32], %v_param_5: Tensor[(1, 1, 8, 16), int8], %v_param_6: Tensor[(16), int32], %v_param_7: Tensor[(3, 3, 16, 1), int8], %v_param_8: Tensor[(16), int32], %v_param_9: Tensor[(1, 1, 16, 32), int8], %v_param_10: Tensor[(32), int32], %v_param_11: Tensor[(3, 3, 32, 1), int8], %v_param_12: Tensor[(32), int32], %v_param_13: Tensor[(1, 1, 32, 32), int8], %v_param_14: Tensor[(32), int32], %v_param_15: Tensor[(3, 3, 32, 1), int8], %v_param_16: Tensor[(32), int32], %v_param_17: Tensor[(1, 1, 32, 64), int8], %v_param_18: Tensor[(64), int32], %v_param_19: Tensor[(3, 3, 64, 1), int8], %v_param_20: Tensor[(64), int32], %v_param_21: Tensor[(1, 1, 64, 64), int8], %v_param_22: Tensor[(64), int32], %v_param_23: Tensor[(3, 3, 64, 1), int8], %v_param_24: Tensor[(64), int32], %v_param_25: Tensor[(1, 1, 64, 128), int8], %v_param_26: Tensor[(128), int32], %v_param_27: Tensor[(3, 3, 128, 1), int8], %v_param_28: Tensor[(128), int32], %v_param_29: Tensor[(1, 1, 128, 128), int8], %v_param_30: Tensor[(128), int32], %v_param_31: Tensor[(3, 3, 128, 1), int8], %v_param_32: Tensor[(128), int32], %v_param_33: Tensor[(1, 1, 128, 128), int8], %v_param_34: Tensor[(128), int32], %v_param_35: Tensor[(3, 3, 128, 1), int8], %v_param_36: Tensor[(128), int32], %v_param_37: Tensor[(1, 1, 128, 128), int8], %v_param_38: Tensor[(128), int32], %v_param_39: Tensor[(3, 3, 128, 1), int8], %v_param_40: Tensor[(128), int32], %v_param_41: Tensor[(1, 1, 128, 128), int8], %v_param_42: Tensor[(128), int32], %v_param_43: Tensor[(3, 3, 128, 1), int8], %v_param_44: Tensor[(128), int32], %v_param_45: Tensor[(1, 1, 128, 128), int8], %v_param_46: Tensor[(128), int32], %v_param_47: Tensor[(3, 3, 128, 1), int8], %v_param_48: Tensor[(128), int32], %v_param_49: Tensor[(1, 1, 128, 256), int8], %v_param_50: Tensor[(256), int32], %v_param_51: Tensor[(3, 3, 256, 1), int8], %v_param_52: Tensor[(256), int32], %v_param_53: Tensor[(1, 1, 256, 256), int8], %v_param_54: Tensor[(256), int32], %v_param_55: Tensor[(1, 1, 256, 2), int8], %v_param_56: Tensor[(2), int32]) -> Tensor[(1, 2), int8] {

LAYER1
  %0 = nn.pad(%input, -2 /* ty=int32 */, pad_width=[[0, 0], [0, 1], [0, 1], [0, 0]]) /* ty=Tensor[(1, 97, 97, 1), int8] */;
  %1 = cast(%v_param_1, dtype="int32") /* ty=Tensor[(3, 3, 1, 8), int32] */;
  %2 = sum(%1, axis=[0, 1, 2]) /* ty=Tensor[(8), int32] */;
  %3 = reshape(%2, newshape=[1, 1, 1, 8]) /* ty=Tensor[(1, 1, 1, 8), int32] */;
  %4 = nn.conv2d(%0, %v_param_1, strides=[2, 2], padding=[0, 0, 0, 0], channels=8, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 48, 48, 8), int32] */;
  %5 = multiply(-2 /* ty=int32 */, %3) /* ty=Tensor[(1, 1, 1, 8), int32] */;
  %6 = subtract(%4, %5) /* ty=Tensor[(1, 48, 48, 8), int32] */;
  %7 = nn.bias_add(%6, %v_param_2, axis=3) /* ty=Tensor[(1, 48, 48, 8), int32] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 48, 48, 8), int32] */;
  %9 = cast(%8, dtype="int64") /* ty=Tensor[(1, 48, 48, 8), int64] */;
  %10 = multiply(%9, meta[relay.Constant][0] /* ty=Tensor[(8), int64] */) /* ty=Tensor[(1, 48, 48, 8), int64] */;
  %11 = add(%10, meta[relay.Constant][1] /* ty=Tensor[(8), int64] */) /* ty=Tensor[(1, 48, 48, 8), int64] */;
  %12 = right_shift(%11, meta[relay.Constant][2] /* ty=Tensor[(8), int64] */) /* ty=Tensor[(1, 48, 48, 8), int64] */;
  %13 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %14 = cast(%12, dtype="int32") /* ty=Tensor[(1, 48, 48, 8), int32] */;
  %15 = add(%13, %14) /* ty=Tensor[(1, 48, 48, 8), int32] */;
  %16 = clip(%15, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 48, 48, 8), int32] */;
  %17 = cast(%16, dtype="int8") /* ty=Tensor[(1, 48, 48, 8), int8] */;
  %18 = clip(%17, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 48, 48, 8), int8] */;

LAYER2
  %19 = nn.pad(%18, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 50, 50, 8), int8] */;
  %20 = cast(%v_param_3, dtype="int32") /* ty=Tensor[(3, 3, 8, 1), int32] */;
  %21 = sum(%20, axis=[0, 1]) /* ty=Tensor[(8, 1), int32] */;
  %22 = reshape(%21, newshape=[1, 1, 1, 8]) /* ty=Tensor[(1, 1, 1, 8), int32] */;
  %23 = nn.conv2d(%19, %v_param_3, padding=[0, 0, 0, 0], groups=8, channels=8, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32") /* ty=Tensor[(1, 48, 48, 8), int32] */;
  %24 = multiply(-128 /* ty=int32 */, %22) /* ty=Tensor[(1, 1, 1, 8), int32] */;
  %25 = subtract(%23, %24) /* ty=Tensor[(1, 48, 48, 8), int32] */;
  %26 = nn.bias_add(%25, %v_param_4, axis=3) /* ty=Tensor[(1, 48, 48, 8), int32] */;
  %27 = cast(%26, dtype="int32") /* ty=Tensor[(1, 48, 48, 8), int32] */;
  %28 = cast(%27, dtype="int64") /* ty=Tensor[(1, 48, 48, 8), int64] */;
  %29 = multiply(%28, meta[relay.Constant][3] /* ty=Tensor[(8), int64] */) /* ty=Tensor[(1, 48, 48, 8), int64] */;
  %30 = add(%29, meta[relay.Constant][4] /* ty=Tensor[(8), int64] */) /* ty=Tensor[(1, 48, 48, 8), int64] */;
  %31 = right_shift(%30, meta[relay.Constant][5] /* ty=Tensor[(8), int64] */) /* ty=Tensor[(1, 48, 48, 8), int64] */;
  %32 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %33 = cast(%31, dtype="int32") /* ty=Tensor[(1, 48, 48, 8), int32] */;
  %34 = add(%32, %33) /* ty=Tensor[(1, 48, 48, 8), int32] */;
  %35 = clip(%34, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 48, 48, 8), int32] */;
  %36 = cast(%35, dtype="int8") /* ty=Tensor[(1, 48, 48, 8), int8] */;
  %37 = clip(%36, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 48, 48, 8), int8] */;

LAYER3
  %38 = cast(%v_param_5, dtype="int32") /* ty=Tensor[(1, 1, 8, 16), int32] */;
  %39 = sum(%38, axis=[0, 1, 2]) /* ty=Tensor[(16), int32] */;
  %40 = reshape(%39, newshape=[1, 1, 1, 16]) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %41 = nn.conv2d(%37, %v_param_5, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 48, 48, 16), int32] */;
  %42 = multiply(-128 /* ty=int32 */, %40) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %43 = subtract(%41, %42) /* ty=Tensor[(1, 48, 48, 16), int32] */;
  %44 = nn.bias_add(%43, %v_param_6, axis=3) /* ty=Tensor[(1, 48, 48, 16), int32] */;
  %45 = cast(%44, dtype="int32") /* ty=Tensor[(1, 48, 48, 16), int32] */;
  %46 = cast(%45, dtype="int64") /* ty=Tensor[(1, 48, 48, 16), int64] */;
  %47 = multiply(%46, meta[relay.Constant][6] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 48, 48, 16), int64] */;
  %48 = add(%47, meta[relay.Constant][7] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 48, 48, 16), int64] */;
  %49 = right_shift(%48, meta[relay.Constant][8] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 48, 48, 16), int64] */;
  %50 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %51 = cast(%49, dtype="int32") /* ty=Tensor[(1, 48, 48, 16), int32] */;
  %52 = add(%50, %51) /* ty=Tensor[(1, 48, 48, 16), int32] */;
  %53 = clip(%52, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 48, 48, 16), int32] */;
  %54 = cast(%53, dtype="int8") /* ty=Tensor[(1, 48, 48, 16), int8] */;
  %55 = clip(%54, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 48, 48, 16), int8] */;

LAYER4
  %56 = nn.pad(%55, -128 /* ty=int32 */, pad_width=[[0, 0], [0, 1], [0, 1], [0, 0]]) /* ty=Tensor[(1, 49, 49, 16), int8] */;
  %57 = cast(%v_param_7, dtype="int32") /* ty=Tensor[(3, 3, 16, 1), int32] */;
  %58 = sum(%57, axis=[0, 1]) /* ty=Tensor[(16, 1), int32] */;
  %59 = reshape(%58, newshape=[1, 1, 1, 16]) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %60 = nn.conv2d(%56, %v_param_7, strides=[2, 2], padding=[0, 0, 0, 0], groups=16, channels=16, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32") /* ty=Tensor[(1, 24, 24, 16), int32] */;
  %61 = multiply(-128 /* ty=int32 */, %59) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %62 = subtract(%60, %61) /* ty=Tensor[(1, 24, 24, 16), int32] */;
  %63 = nn.bias_add(%62, %v_param_8, axis=3) /* ty=Tensor[(1, 24, 24, 16), int32] */;
  %64 = cast(%63, dtype="int32") /* ty=Tensor[(1, 24, 24, 16), int32] */;
  %65 = cast(%64, dtype="int64") /* ty=Tensor[(1, 24, 24, 16), int64] */;
  %66 = multiply(%65, meta[relay.Constant][9] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 24, 24, 16), int64] */;
  %67 = add(%66, meta[relay.Constant][10] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 24, 24, 16), int64] */;
  %68 = right_shift(%67, meta[relay.Constant][11] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 24, 24, 16), int64] */;
  %69 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %70 = cast(%68, dtype="int32") /* ty=Tensor[(1, 24, 24, 16), int32] */;
  %71 = add(%69, %70) /* ty=Tensor[(1, 24, 24, 16), int32] */;
  %72 = clip(%71, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 24, 24, 16), int32] */;
  %73 = cast(%72, dtype="int8") /* ty=Tensor[(1, 24, 24, 16), int8] */;
  %74 = clip(%73, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 24, 24, 16), int8] */;

LAYER5
  %75 = cast(%v_param_9, dtype="int32") /* ty=Tensor[(1, 1, 16, 32), int32] */;
  %76 = sum(%75, axis=[0, 1, 2]) /* ty=Tensor[(32), int32] */;
  %77 = reshape(%76, newshape=[1, 1, 1, 32]) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %78 = nn.conv2d(%74, %v_param_9, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 24, 24, 32), int32] */;
  %79 = multiply(-128 /* ty=int32 */, %77) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %80 = subtract(%78, %79) /* ty=Tensor[(1, 24, 24, 32), int32] */;
  %81 = nn.bias_add(%80, %v_param_10, axis=3) /* ty=Tensor[(1, 24, 24, 32), int32] */;
  %82 = cast(%81, dtype="int32") /* ty=Tensor[(1, 24, 24, 32), int32] */;
  %83 = cast(%82, dtype="int64") /* ty=Tensor[(1, 24, 24, 32), int64] */;
  %84 = multiply(%83, meta[relay.Constant][12] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 24, 24, 32), int64] */;
  %85 = add(%84, meta[relay.Constant][13] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 24, 24, 32), int64] */;
  %86 = right_shift(%85, meta[relay.Constant][14] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 24, 24, 32), int64] */;
  %87 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %88 = cast(%86, dtype="int32") /* ty=Tensor[(1, 24, 24, 32), int32] */;
  %89 = add(%87, %88) /* ty=Tensor[(1, 24, 24, 32), int32] */;
  %90 = clip(%89, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 24, 24, 32), int32] */;
  %91 = cast(%90, dtype="int8") /* ty=Tensor[(1, 24, 24, 32), int8] */;
  %92 = clip(%91, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 24, 24, 32), int8] */;

LAYER 6
  %93 = nn.pad(%92, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 26, 26, 32), int8] */;
  %94 = cast(%v_param_11, dtype="int32") /* ty=Tensor[(3, 3, 32, 1), int32] */;
  %95 = sum(%94, axis=[0, 1]) /* ty=Tensor[(32, 1), int32] */;
  %96 = reshape(%95, newshape=[1, 1, 1, 32]) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %97 = nn.conv2d(%93, %v_param_11, padding=[0, 0, 0, 0], groups=32, channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32") /* ty=Tensor[(1, 24, 24, 32), int32] */;
  %98 = multiply(-128 /* ty=int32 */, %96) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %99 = subtract(%97, %98) /* ty=Tensor[(1, 24, 24, 32), int32] */;
  %100 = nn.bias_add(%99, %v_param_12, axis=3) /* ty=Tensor[(1, 24, 24, 32), int32] */;
  %101 = cast(%100, dtype="int32") /* ty=Tensor[(1, 24, 24, 32), int32] */;
  %102 = cast(%101, dtype="int64") /* ty=Tensor[(1, 24, 24, 32), int64] */;
  %103 = multiply(%102, meta[relay.Constant][15] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 24, 24, 32), int64] */;
  %104 = add(%103, meta[relay.Constant][16] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 24, 24, 32), int64] */;
  %105 = right_shift(%104, meta[relay.Constant][17] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 24, 24, 32), int64] */;
  %106 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %107 = cast(%105, dtype="int32") /* ty=Tensor[(1, 24, 24, 32), int32] */;
  %108 = add(%106, %107) /* ty=Tensor[(1, 24, 24, 32), int32] */;
  %109 = clip(%108, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 24, 24, 32), int32] */;
  %110 = cast(%109, dtype="int8") /* ty=Tensor[(1, 24, 24, 32), int8] */;
  %111 = clip(%110, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 24, 24, 32), int8] */;

LAYER7
  %112 = cast(%v_param_13, dtype="int32") /* ty=Tensor[(1, 1, 32, 32), int32] */;
  %113 = sum(%112, axis=[0, 1, 2]) /* ty=Tensor[(32), int32] */;
  %114 = reshape(%113, newshape=[1, 1, 1, 32]) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %115 = nn.conv2d(%111, %v_param_13, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 24, 24, 32), int32] */;
  %116 = multiply(-128 /* ty=int32 */, %114) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %117 = subtract(%115, %116) /* ty=Tensor[(1, 24, 24, 32), int32] */;
  %118 = nn.bias_add(%117, %v_param_14, axis=3) /* ty=Tensor[(1, 24, 24, 32), int32] */;
  %119 = cast(%118, dtype="int32") /* ty=Tensor[(1, 24, 24, 32), int32] */;
  %120 = cast(%119, dtype="int64") /* ty=Tensor[(1, 24, 24, 32), int64] */;
  %121 = multiply(%120, meta[relay.Constant][18] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 24, 24, 32), int64] */;
  %122 = add(%121, meta[relay.Constant][19] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 24, 24, 32), int64] */;
  %123 = right_shift(%122, meta[relay.Constant][20] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 24, 24, 32), int64] */;
  %124 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %125 = cast(%123, dtype="int32") /* ty=Tensor[(1, 24, 24, 32), int32] */;
  %126 = add(%124, %125) /* ty=Tensor[(1, 24, 24, 32), int32] */;
  %127 = clip(%126, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 24, 24, 32), int32] */;
  %128 = cast(%127, dtype="int8") /* ty=Tensor[(1, 24, 24, 32), int8] */;
  %129 = clip(%128, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 24, 24, 32), int8] */;

LAYER8
  %130 = nn.pad(%129, -128 /* ty=int32 */, pad_width=[[0, 0], [0, 1], [0, 1], [0, 0]]) /* ty=Tensor[(1, 25, 25, 32), int8] */;
  %131 = cast(%v_param_15, dtype="int32") /* ty=Tensor[(3, 3, 32, 1), int32] */;
  %132 = sum(%131, axis=[0, 1]) /* ty=Tensor[(32, 1), int32] */;
  %133 = reshape(%132, newshape=[1, 1, 1, 32]) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %134 = nn.conv2d(%130, %v_param_15, strides=[2, 2], padding=[0, 0, 0, 0], groups=32, channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32") /* ty=Tensor[(1, 12, 12, 32), int32] */;
  %135 = multiply(-128 /* ty=int32 */, %133) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %136 = subtract(%134, %135) /* ty=Tensor[(1, 12, 12, 32), int32] */;
  %137 = nn.bias_add(%136, %v_param_16, axis=3) /* ty=Tensor[(1, 12, 12, 32), int32] */;
  %138 = cast(%137, dtype="int32") /* ty=Tensor[(1, 12, 12, 32), int32] */;
  %139 = cast(%138, dtype="int64") /* ty=Tensor[(1, 12, 12, 32), int64] */;
  %140 = multiply(%139, meta[relay.Constant][21] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 12, 12, 32), int64] */;
  %141 = add(%140, meta[relay.Constant][22] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 12, 12, 32), int64] */;
  %142 = right_shift(%141, meta[relay.Constant][23] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 12, 12, 32), int64] */;
  %143 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %144 = cast(%142, dtype="int32") /* ty=Tensor[(1, 12, 12, 32), int32] */;
  %145 = add(%143, %144) /* ty=Tensor[(1, 12, 12, 32), int32] */;
  %146 = clip(%145, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 12, 32), int32] */;
  %147 = cast(%146, dtype="int8") /* ty=Tensor[(1, 12, 12, 32), int8] */;
  %148 = clip(%147, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 12, 32), int8] */;

LAYER9
  %149 = cast(%v_param_17, dtype="int32") /* ty=Tensor[(1, 1, 32, 64), int32] */;
  %150 = sum(%149, axis=[0, 1, 2]) /* ty=Tensor[(64), int32] */;
  %151 = reshape(%150, newshape=[1, 1, 1, 64]) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %152 = nn.conv2d(%148, %v_param_17, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 12, 12, 64), int32] */;
  %153 = multiply(-128 /* ty=int32 */, %151) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %154 = subtract(%152, %153) /* ty=Tensor[(1, 12, 12, 64), int32] */;
  %155 = nn.bias_add(%154, %v_param_18, axis=3) /* ty=Tensor[(1, 12, 12, 64), int32] */;
  %156 = cast(%155, dtype="int32") /* ty=Tensor[(1, 12, 12, 64), int32] */;
  %157 = cast(%156, dtype="int64") /* ty=Tensor[(1, 12, 12, 64), int64] */;
  %158 = multiply(%157, meta[relay.Constant][24] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 12, 12, 64), int64] */;
  %159 = add(%158, meta[relay.Constant][25] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 12, 12, 64), int64] */;
  %160 = right_shift(%159, meta[relay.Constant][26] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 12, 12, 64), int64] */;
  %161 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %162 = cast(%160, dtype="int32") /* ty=Tensor[(1, 12, 12, 64), int32] */;
  %163 = add(%161, %162) /* ty=Tensor[(1, 12, 12, 64), int32] */;
  %164 = clip(%163, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 12, 64), int32] */;
  %165 = cast(%164, dtype="int8") /* ty=Tensor[(1, 12, 12, 64), int8] */;
  %166 = clip(%165, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 12, 64), int8] */;

LAYER10
  %167 = nn.pad(%166, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 14, 14, 64), int8] */;
  %168 = cast(%v_param_19, dtype="int32") /* ty=Tensor[(3, 3, 64, 1), int32] */;
  %169 = sum(%168, axis=[0, 1]) /* ty=Tensor[(64, 1), int32] */;
  %170 = reshape(%169, newshape=[1, 1, 1, 64]) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %171 = nn.conv2d(%167, %v_param_19, padding=[0, 0, 0, 0], groups=64, channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32") /* ty=Tensor[(1, 12, 12, 64), int32] */;
  %172 = multiply(-128 /* ty=int32 */, %170) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %173 = subtract(%171, %172) /* ty=Tensor[(1, 12, 12, 64), int32] */;
  %174 = nn.bias_add(%173, %v_param_20, axis=3) /* ty=Tensor[(1, 12, 12, 64), int32] */;
  %175 = cast(%174, dtype="int32") /* ty=Tensor[(1, 12, 12, 64), int32] */;
  %176 = cast(%175, dtype="int64") /* ty=Tensor[(1, 12, 12, 64), int64] */;
  %177 = multiply(%176, meta[relay.Constant][27] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 12, 12, 64), int64] */;
  %178 = add(%177, meta[relay.Constant][28] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 12, 12, 64), int64] */;
  %179 = right_shift(%178, meta[relay.Constant][29] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 12, 12, 64), int64] */;
  %180 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %181 = cast(%179, dtype="int32") /* ty=Tensor[(1, 12, 12, 64), int32] */;
  %182 = add(%180, %181) /* ty=Tensor[(1, 12, 12, 64), int32] */;
  %183 = clip(%182, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 12, 64), int32] */;
  %184 = cast(%183, dtype="int8") /* ty=Tensor[(1, 12, 12, 64), int8] */;
  %185 = clip(%184, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 12, 64), int8] */;

LAYER11
  %186 = cast(%v_param_21, dtype="int32") /* ty=Tensor[(1, 1, 64, 64), int32] */;
  %187 = sum(%186, axis=[0, 1, 2]) /* ty=Tensor[(64), int32] */;
  %188 = reshape(%187, newshape=[1, 1, 1, 64]) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %189 = nn.conv2d(%185, %v_param_21, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 12, 12, 64), int32] */;
  %190 = multiply(-128 /* ty=int32 */, %188) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %191 = subtract(%189, %190) /* ty=Tensor[(1, 12, 12, 64), int32] */;
  %192 = nn.bias_add(%191, %v_param_22, axis=3) /* ty=Tensor[(1, 12, 12, 64), int32] */;
  %193 = cast(%192, dtype="int32") /* ty=Tensor[(1, 12, 12, 64), int32] */;
  %194 = cast(%193, dtype="int64") /* ty=Tensor[(1, 12, 12, 64), int64] */;
  %195 = multiply(%194, meta[relay.Constant][30] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 12, 12, 64), int64] */;
  %196 = add(%195, meta[relay.Constant][31] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 12, 12, 64), int64] */;
  %197 = right_shift(%196, meta[relay.Constant][32] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 12, 12, 64), int64] */;
  %198 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %199 = cast(%197, dtype="int32") /* ty=Tensor[(1, 12, 12, 64), int32] */;
  %200 = add(%198, %199) /* ty=Tensor[(1, 12, 12, 64), int32] */;
  %201 = clip(%200, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 12, 64), int32] */;
  %202 = cast(%201, dtype="int8") /* ty=Tensor[(1, 12, 12, 64), int8] */;
  %203 = clip(%202, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 12, 12, 64), int8] */;

LAYER12
  %204 = nn.pad(%203, -128 /* ty=int32 */, pad_width=[[0, 0], [0, 1], [0, 1], [0, 0]]) /* ty=Tensor[(1, 13, 13, 64), int8] */;
  %205 = cast(%v_param_23, dtype="int32") /* ty=Tensor[(3, 3, 64, 1), int32] */;
  %206 = sum(%205, axis=[0, 1]) /* ty=Tensor[(64, 1), int32] */;
  %207 = reshape(%206, newshape=[1, 1, 1, 64]) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %208 = nn.conv2d(%204, %v_param_23, strides=[2, 2], padding=[0, 0, 0, 0], groups=64, channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32") /* ty=Tensor[(1, 6, 6, 64), int32] */;
  %209 = multiply(-128 /* ty=int32 */, %207) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %210 = subtract(%208, %209) /* ty=Tensor[(1, 6, 6, 64), int32] */;
  %211 = nn.bias_add(%210, %v_param_24, axis=3) /* ty=Tensor[(1, 6, 6, 64), int32] */;
  %212 = cast(%211, dtype="int32") /* ty=Tensor[(1, 6, 6, 64), int32] */;
  %213 = cast(%212, dtype="int64") /* ty=Tensor[(1, 6, 6, 64), int64] */;
  %214 = multiply(%213, meta[relay.Constant][33] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 6, 6, 64), int64] */;
  %215 = add(%214, meta[relay.Constant][34] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 6, 6, 64), int64] */;
  %216 = right_shift(%215, meta[relay.Constant][35] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 6, 6, 64), int64] */;
  %217 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %218 = cast(%216, dtype="int32") /* ty=Tensor[(1, 6, 6, 64), int32] */;
  %219 = add(%217, %218) /* ty=Tensor[(1, 6, 6, 64), int32] */;
  %220 = clip(%219, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 6, 6, 64), int32] */;
  %221 = cast(%220, dtype="int8") /* ty=Tensor[(1, 6, 6, 64), int8] */;
  %222 = clip(%221, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 6, 6, 64), int8] */;

LAYER13
  %223 = cast(%v_param_25, dtype="int32") /* ty=Tensor[(1, 1, 64, 128), int32] */;
  %224 = sum(%223, axis=[0, 1, 2]) /* ty=Tensor[(128), int32] */;
  %225 = reshape(%224, newshape=[1, 1, 1, 128]) /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %226 = nn.conv2d(%222, %v_param_25, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %227 = multiply(-128 /* ty=int32 */, %225) /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %228 = subtract(%226, %227) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %229 = nn.bias_add(%228, %v_param_26, axis=3) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %230 = cast(%229, dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %231 = cast(%230, dtype="int64") /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %232 = multiply(%231, meta[relay.Constant][36] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %233 = add(%232, meta[relay.Constant][37] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %234 = right_shift(%233, meta[relay.Constant][38] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %235 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %236 = cast(%234, dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %237 = add(%235, %236) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %238 = clip(%237, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %239 = cast(%238, dtype="int8") /* ty=Tensor[(1, 6, 6, 128), int8] */;
  %240 = clip(%239, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 6, 6, 128), int8] */;

LAYER14
  %241 = nn.pad(%240, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 8, 8, 128), int8] */;
  %242 = cast(%v_param_27, dtype="int32") /* ty=Tensor[(3, 3, 128, 1), int32] */;
  %243 = sum(%242, axis=[0, 1]) /* ty=Tensor[(128, 1), int32] */;
  %244 = reshape(%243, newshape=[1, 1, 1, 128]) /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %245 = nn.conv2d(%241, %v_param_27, padding=[0, 0, 0, 0], groups=128, channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %246 = multiply(-128 /* ty=int32 */, %244) /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %247 = subtract(%245, %246) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %248 = nn.bias_add(%247, %v_param_28, axis=3) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %249 = cast(%248, dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %250 = cast(%249, dtype="int64") /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %251 = multiply(%250, meta[relay.Constant][39] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %252 = add(%251, meta[relay.Constant][40] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %253 = right_shift(%252, meta[relay.Constant][41] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %254 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %255 = cast(%253, dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %256 = add(%254, %255) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %257 = clip(%256, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %258 = cast(%257, dtype="int8") /* ty=Tensor[(1, 6, 6, 128), int8] */;
  %259 = clip(%258, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 6, 6, 128), int8] */;

LAYER15
  %260 = cast(%v_param_29, dtype="int32") /* ty=Tensor[(1, 1, 128, 128), int32] */;
  %261 = sum(%260, axis=[0, 1, 2]) /* ty=Tensor[(128), int32] */;
  %262 = reshape(%261, newshape=[1, 1, 1, 128]) /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %263 = nn.conv2d(%259, %v_param_29, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %264 = multiply(-128 /* ty=int32 */, %262) /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %265 = subtract(%263, %264) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %266 = nn.bias_add(%265, %v_param_30, axis=3) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %267 = cast(%266, dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %268 = cast(%267, dtype="int64") /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %269 = multiply(%268, meta[relay.Constant][42] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %270 = add(%269, meta[relay.Constant][43] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %271 = right_shift(%270, meta[relay.Constant][44] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %272 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %273 = cast(%271, dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %274 = add(%272, %273) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %275 = clip(%274, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %276 = cast(%275, dtype="int8") /* ty=Tensor[(1, 6, 6, 128), int8] */;
  %277 = clip(%276, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 6, 6, 128), int8] */;

LAYER16
  %278 = nn.pad(%277, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 8, 8, 128), int8] */;
  %279 = cast(%v_param_31, dtype="int32") /* ty=Tensor[(3, 3, 128, 1), int32] */;
  %280 = sum(%279, axis=[0, 1]) /* ty=Tensor[(128, 1), int32] */;
  %281 = reshape(%280, newshape=[1, 1, 1, 128]) /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %282 = nn.conv2d(%278, %v_param_31, padding=[0, 0, 0, 0], groups=128, channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %283 = multiply(-128 /* ty=int32 */, %281) /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %284 = subtract(%282, %283) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %285 = nn.bias_add(%284, %v_param_32, axis=3) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %286 = cast(%285, dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %287 = cast(%286, dtype="int64") /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %288 = multiply(%287, meta[relay.Constant][45] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %289 = add(%288, meta[relay.Constant][46] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %290 = right_shift(%289, meta[relay.Constant][47] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %291 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %292 = cast(%290, dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %293 = add(%291, %292) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %294 = clip(%293, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 6, 6, 128), int32] */;

LAYER17
  %295 = cast(%294, dtype="int8") /* ty=Tensor[(1, 6, 6, 128), int8] */;
  %296 = clip(%295, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 6, 6, 128), int8] */;
  %297 = cast(%v_param_33, dtype="int32") /* ty=Tensor[(1, 1, 128, 128), int32] */;
  %298 = sum(%297, axis=[0, 1, 2]) /* ty=Tensor[(128), int32] */;
  %299 = reshape(%298, newshape=[1, 1, 1, 128]) /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %300 = nn.conv2d(%296, %v_param_33, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %301 = multiply(-128 /* ty=int32 */, %299) /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %302 = subtract(%300, %301) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %303 = nn.bias_add(%302, %v_param_34, axis=3) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %304 = cast(%303, dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %305 = cast(%304, dtype="int64") /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %306 = multiply(%305, meta[relay.Constant][48] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %307 = add(%306, meta[relay.Constant][49] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %308 = right_shift(%307, meta[relay.Constant][50] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %309 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %310 = cast(%308, dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %311 = add(%309, %310) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %312 = clip(%311, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %313 = cast(%312, dtype="int8") /* ty=Tensor[(1, 6, 6, 128), int8] */;
  %314 = clip(%313, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 6, 6, 128), int8] */;

LAYER18
  %315 = nn.pad(%314, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 8, 8, 128), int8] */;
  %316 = cast(%v_param_35, dtype="int32") /* ty=Tensor[(3, 3, 128, 1), int32] */;
  %317 = sum(%316, axis=[0, 1]) /* ty=Tensor[(128, 1), int32] */;
  %318 = reshape(%317, newshape=[1, 1, 1, 128]) /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %319 = nn.conv2d(%315, %v_param_35, padding=[0, 0, 0, 0], groups=128, channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %320 = multiply(-128 /* ty=int32 */, %318) /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %321 = subtract(%319, %320) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %322 = nn.bias_add(%321, %v_param_36, axis=3) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %323 = cast(%322, dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %324 = cast(%323, dtype="int64") /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %325 = multiply(%324, meta[relay.Constant][51] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %326 = add(%325, meta[relay.Constant][52] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %327 = right_shift(%326, meta[relay.Constant][53] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %328 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %329 = cast(%327, dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %330 = add(%328, %329) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %331 = clip(%330, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %332 = cast(%331, dtype="int8") /* ty=Tensor[(1, 6, 6, 128), int8] */;
  %333 = clip(%332, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 6, 6, 128), int8] */;

LAYER19
  %334 = cast(%v_param_37, dtype="int32") /* ty=Tensor[(1, 1, 128, 128), int32] */;
  %335 = sum(%334, axis=[0, 1, 2]) /* ty=Tensor[(128), int32] */;
  %336 = reshape(%335, newshape=[1, 1, 1, 128]) /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %337 = nn.conv2d(%333, %v_param_37, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %338 = multiply(-128 /* ty=int32 */, %336) /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %339 = subtract(%337, %338) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %340 = nn.bias_add(%339, %v_param_38, axis=3) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %341 = cast(%340, dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %342 = cast(%341, dtype="int64") /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %343 = multiply(%342, meta[relay.Constant][54] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %344 = add(%343, meta[relay.Constant][55] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %345 = right_shift(%344, meta[relay.Constant][56] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %346 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %347 = cast(%345, dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %348 = add(%346, %347) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %349 = clip(%348, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %350 = cast(%349, dtype="int8") /* ty=Tensor[(1, 6, 6, 128), int8] */;
  %351 = clip(%350, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 6, 6, 128), int8] */;

LAYER20
  %352 = nn.pad(%351, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 8, 8, 128), int8] */;
  %353 = cast(%v_param_39, dtype="int32") /* ty=Tensor[(3, 3, 128, 1), int32] */;
  %354 = sum(%353, axis=[0, 1]) /* ty=Tensor[(128, 1), int32] */;
  %355 = reshape(%354, newshape=[1, 1, 1, 128]) /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %356 = nn.conv2d(%352, %v_param_39, padding=[0, 0, 0, 0], groups=128, channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %357 = multiply(-128 /* ty=int32 */, %355) /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %358 = subtract(%356, %357) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %359 = nn.bias_add(%358, %v_param_40, axis=3) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %360 = cast(%359, dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %361 = cast(%360, dtype="int64") /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %362 = multiply(%361, meta[relay.Constant][57] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %363 = add(%362, meta[relay.Constant][58] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %364 = right_shift(%363, meta[relay.Constant][59] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %365 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %366 = cast(%364, dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %367 = add(%365, %366) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %368 = clip(%367, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %369 = cast(%368, dtype="int8") /* ty=Tensor[(1, 6, 6, 128), int8] */;
  %370 = clip(%369, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 6, 6, 128), int8] */;

LAYER21
  %371 = cast(%v_param_41, dtype="int32") /* ty=Tensor[(1, 1, 128, 128), int32] */;
  %372 = sum(%371, axis=[0, 1, 2]) /* ty=Tensor[(128), int32] */;
  %373 = reshape(%372, newshape=[1, 1, 1, 128]) /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %374 = nn.conv2d(%370, %v_param_41, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %375 = multiply(-128 /* ty=int32 */, %373) /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %376 = subtract(%374, %375) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %377 = nn.bias_add(%376, %v_param_42, axis=3) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %378 = cast(%377, dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %379 = cast(%378, dtype="int64") /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %380 = multiply(%379, meta[relay.Constant][60] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %381 = add(%380, meta[relay.Constant][61] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %382 = right_shift(%381, meta[relay.Constant][62] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %383 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %384 = cast(%382, dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %385 = add(%383, %384) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %386 = clip(%385, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %387 = cast(%386, dtype="int8") /* ty=Tensor[(1, 6, 6, 128), int8] */;
  %388 = clip(%387, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 6, 6, 128), int8] */;

LAYER22
  %389 = nn.pad(%388, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 8, 8, 128), int8] */;
  %390 = cast(%v_param_43, dtype="int32") /* ty=Tensor[(3, 3, 128, 1), int32] */;
  %391 = sum(%390, axis=[0, 1]) /* ty=Tensor[(128, 1), int32] */;
  %392 = reshape(%391, newshape=[1, 1, 1, 128]) /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %393 = nn.conv2d(%389, %v_param_43, padding=[0, 0, 0, 0], groups=128, channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %394 = multiply(-128 /* ty=int32 */, %392) /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %395 = subtract(%393, %394) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %396 = nn.bias_add(%395, %v_param_44, axis=3) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %397 = cast(%396, dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %398 = cast(%397, dtype="int64") /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %399 = multiply(%398, meta[relay.Constant][63] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %400 = add(%399, meta[relay.Constant][64] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %401 = right_shift(%400, meta[relay.Constant][65] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %402 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %403 = cast(%401, dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %404 = add(%402, %403) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %405 = clip(%404, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %406 = cast(%405, dtype="int8") /* ty=Tensor[(1, 6, 6, 128), int8] */;
  %407 = clip(%406, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 6, 6, 128), int8] */;

LAYER23
  %408 = cast(%v_param_45, dtype="int32") /* ty=Tensor[(1, 1, 128, 128), int32] */;
  %409 = sum(%408, axis=[0, 1, 2]) /* ty=Tensor[(128), int32] */;
  %410 = reshape(%409, newshape=[1, 1, 1, 128]) /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %411 = nn.conv2d(%407, %v_param_45, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %412 = multiply(-128 /* ty=int32 */, %410) /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %413 = subtract(%411, %412) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %414 = nn.bias_add(%413, %v_param_46, axis=3) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %415 = cast(%414, dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %416 = cast(%415, dtype="int64") /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %417 = multiply(%416, meta[relay.Constant][66] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %418 = add(%417, meta[relay.Constant][67] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %419 = right_shift(%418, meta[relay.Constant][68] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 6, 6, 128), int64] */;
  %420 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %421 = cast(%419, dtype="int32") /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %422 = add(%420, %421) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %423 = clip(%422, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 6, 6, 128), int32] */;
  %424 = cast(%423, dtype="int8") /* ty=Tensor[(1, 6, 6, 128), int8] */;
  %425 = clip(%424, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 6, 6, 128), int8] */;

LAYER24
  %426 = nn.pad(%425, -128 /* ty=int32 */, pad_width=[[0, 0], [0, 1], [0, 1], [0, 0]]) /* ty=Tensor[(1, 7, 7, 128), int8] */;
  %427 = cast(%v_param_47, dtype="int32") /* ty=Tensor[(3, 3, 128, 1), int32] */;
  %428 = sum(%427, axis=[0, 1]) /* ty=Tensor[(128, 1), int32] */;
  %429 = reshape(%428, newshape=[1, 1, 1, 128]) /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %430 = nn.conv2d(%426, %v_param_47, strides=[2, 2], padding=[0, 0, 0, 0], groups=128, channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32") /* ty=Tensor[(1, 3, 3, 128), int32] */;
  %431 = multiply(-128 /* ty=int32 */, %429) /* ty=Tensor[(1, 1, 1, 128), int32] */;
  %432 = subtract(%430, %431) /* ty=Tensor[(1, 3, 3, 128), int32] */;
  %433 = nn.bias_add(%432, %v_param_48, axis=3) /* ty=Tensor[(1, 3, 3, 128), int32] */;
  %434 = cast(%433, dtype="int32") /* ty=Tensor[(1, 3, 3, 128), int32] */;
  %435 = cast(%434, dtype="int64") /* ty=Tensor[(1, 3, 3, 128), int64] */;
  %436 = multiply(%435, meta[relay.Constant][69] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 3, 3, 128), int64] */;
  %437 = add(%436, meta[relay.Constant][70] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 3, 3, 128), int64] */;
  %438 = right_shift(%437, meta[relay.Constant][71] /* ty=Tensor[(128), int64] */) /* ty=Tensor[(1, 3, 3, 128), int64] */;
  %439 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %440 = cast(%438, dtype="int32") /* ty=Tensor[(1, 3, 3, 128), int32] */;
  %441 = add(%439, %440) /* ty=Tensor[(1, 3, 3, 128), int32] */;
  %442 = clip(%441, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 3, 3, 128), int32] */;
  %443 = cast(%442, dtype="int8") /* ty=Tensor[(1, 3, 3, 128), int8] */;
  %444 = clip(%443, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 3, 3, 128), int8] */;

LAYER25
  %445 = cast(%v_param_49, dtype="int32") /* ty=Tensor[(1, 1, 128, 256), int32] */;
  %446 = sum(%445, axis=[0, 1, 2]) /* ty=Tensor[(256), int32] */;
  %447 = reshape(%446, newshape=[1, 1, 1, 256]) /* ty=Tensor[(1, 1, 1, 256), int32] */;
  %448 = nn.conv2d(%444, %v_param_49, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 3, 3, 256), int32] */;
  %449 = multiply(-128 /* ty=int32 */, %447) /* ty=Tensor[(1, 1, 1, 256), int32] */;
  %450 = subtract(%448, %449) /* ty=Tensor[(1, 3, 3, 256), int32] */;
  %451 = nn.bias_add(%450, %v_param_50, axis=3) /* ty=Tensor[(1, 3, 3, 256), int32] */;
  %452 = cast(%451, dtype="int32") /* ty=Tensor[(1, 3, 3, 256), int32] */;
  %453 = cast(%452, dtype="int64") /* ty=Tensor[(1, 3, 3, 256), int64] */;
  %454 = multiply(%453, meta[relay.Constant][72] /* ty=Tensor[(256), int64] */) /* ty=Tensor[(1, 3, 3, 256), int64] */;
  %455 = add(%454, meta[relay.Constant][73] /* ty=Tensor[(256), int64] */) /* ty=Tensor[(1, 3, 3, 256), int64] */;
  %456 = right_shift(%455, meta[relay.Constant][74] /* ty=Tensor[(256), int64] */) /* ty=Tensor[(1, 3, 3, 256), int64] */;
  %457 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %458 = cast(%456, dtype="int32") /* ty=Tensor[(1, 3, 3, 256), int32] */;
  %459 = add(%457, %458) /* ty=Tensor[(1, 3, 3, 256), int32] */;
  %460 = clip(%459, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 3, 3, 256), int32] */;
  %461 = cast(%460, dtype="int8") /* ty=Tensor[(1, 3, 3, 256), int8] */;
  %462 = clip(%461, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 3, 3, 256), int8] */;

LAYER26
  %463 = nn.pad(%462, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 5, 5, 256), int8] */;
  %464 = cast(%v_param_51, dtype="int32") /* ty=Tensor[(3, 3, 256, 1), int32] */;
  %465 = sum(%464, axis=[0, 1]) /* ty=Tensor[(256, 1), int32] */;
  %466 = reshape(%465, newshape=[1, 1, 1, 256]) /* ty=Tensor[(1, 1, 1, 256), int32] */;
  %467 = nn.conv2d(%463, %v_param_51, padding=[0, 0, 0, 0], groups=256, channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32") /* ty=Tensor[(1, 3, 3, 256), int32] */;
  %468 = multiply(-128 /* ty=int32 */, %466) /* ty=Tensor[(1, 1, 1, 256), int32] */;
  %469 = subtract(%467, %468) /* ty=Tensor[(1, 3, 3, 256), int32] */;
  %470 = nn.bias_add(%469, %v_param_52, axis=3) /* ty=Tensor[(1, 3, 3, 256), int32] */;
  %471 = cast(%470, dtype="int32") /* ty=Tensor[(1, 3, 3, 256), int32] */;
  %472 = cast(%471, dtype="int64") /* ty=Tensor[(1, 3, 3, 256), int64] */;
  %473 = multiply(%472, meta[relay.Constant][75] /* ty=Tensor[(256), int64] */) /* ty=Tensor[(1, 3, 3, 256), int64] */;
  %474 = add(%473, meta[relay.Constant][76] /* ty=Tensor[(256), int64] */) /* ty=Tensor[(1, 3, 3, 256), int64] */;
  %475 = right_shift(%474, meta[relay.Constant][77] /* ty=Tensor[(256), int64] */) /* ty=Tensor[(1, 3, 3, 256), int64] */;
  %476 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %477 = cast(%475, dtype="int32") /* ty=Tensor[(1, 3, 3, 256), int32] */;
  %478 = add(%476, %477) /* ty=Tensor[(1, 3, 3, 256), int32] */;
  %479 = clip(%478, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 3, 3, 256), int32] */;
  %480 = cast(%479, dtype="int8") /* ty=Tensor[(1, 3, 3, 256), int8] */;
  %481 = clip(%480, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 3, 3, 256), int8] */;

LAYER27
  %482 = cast(%v_param_53, dtype="int32") /* ty=Tensor[(1, 1, 256, 256), int32] */;
  %483 = sum(%482, axis=[0, 1, 2]) /* ty=Tensor[(256), int32] */;
  %484 = reshape(%483, newshape=[1, 1, 1, 256]) /* ty=Tensor[(1, 1, 1, 256), int32] */;
  %485 = nn.conv2d(%481, %v_param_53, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 3, 3, 256), int32] */;
  %486 = multiply(-128 /* ty=int32 */, %484) /* ty=Tensor[(1, 1, 1, 256), int32] */;
  %487 = subtract(%485, %486) /* ty=Tensor[(1, 3, 3, 256), int32] */;
  %488 = nn.bias_add(%487, %v_param_54, axis=3) /* ty=Tensor[(1, 3, 3, 256), int32] */;
  %489 = cast(%488, dtype="int32") /* ty=Tensor[(1, 3, 3, 256), int32] */;
  %490 = cast(%489, dtype="int64") /* ty=Tensor[(1, 3, 3, 256), int64] */;
  %491 = multiply(%490, meta[relay.Constant][78] /* ty=Tensor[(256), int64] */) /* ty=Tensor[(1, 3, 3, 256), int64] */;
  %492 = add(%491, meta[relay.Constant][79] /* ty=Tensor[(256), int64] */) /* ty=Tensor[(1, 3, 3, 256), int64] */;
  %493 = right_shift(%492, meta[relay.Constant][80] /* ty=Tensor[(256), int64] */) /* ty=Tensor[(1, 3, 3, 256), int64] */;
  %494 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %495 = cast(%493, dtype="int32") /* ty=Tensor[(1, 3, 3, 256), int32] */;
  %496 = add(%494, %495) /* ty=Tensor[(1, 3, 3, 256), int32] */;
  %497 = clip(%496, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 3, 3, 256), int32] */;
  %498 = cast(%497, dtype="int8") /* ty=Tensor[(1, 3, 3, 256), int8] */;
  %499 = clip(%498, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 3, 3, 256), int8] */;

LAYER28
  %500 = cast(%499, dtype="int32") /* ty=Tensor[(1, 3, 3, 256), int32] */;
  %501 = nn.avg_pool2d(%500, pool_size=[3, 3], strides=[2, 2], padding=[0, 0, 0, 0], layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), int32] */;
  %502 = cast(%501, dtype="int8") /* ty=Tensor[(1, 1, 1, 256), int8] */;
  %503 = cast(%v_param_55, dtype="int32") /* ty=Tensor[(1, 1, 256, 2), int32] */;
  %504 = sum(%503, axis=[0, 1, 2]) /* ty=Tensor[(2), int32] */;
  %505 = reshape(%504, newshape=[1, 1, 1, 2]) /* ty=Tensor[(1, 1, 1, 2), int32] */;

LAYER29
  %506 = nn.conv2d(%502, %v_param_55, padding=[0, 0, 0, 0], channels=2, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 1, 1, 2), int32] */;
  %507 = multiply(-128 /* ty=int32 */, %505) /* ty=Tensor[(1, 1, 1, 2), int32] */;
  %508 = subtract(%506, %507) /* ty=Tensor[(1, 1, 1, 2), int32] */;
  %509 = nn.bias_add(%508, %v_param_56, axis=3) /* ty=Tensor[(1, 1, 1, 2), int32] */;
  %510 = cast(%509, dtype="int32") /* ty=Tensor[(1, 1, 1, 2), int32] */;
  %511 = cast(%510, dtype="int64") /* ty=Tensor[(1, 1, 1, 2), int64] */;
  %512 = multiply(%511, meta[relay.Constant][81] /* ty=Tensor[(2), int64] */) /* ty=Tensor[(1, 1, 1, 2), int64] */;
  %513 = add(%512, meta[relay.Constant][82] /* ty=Tensor[(2), int64] */) /* ty=Tensor[(1, 1, 1, 2), int64] */;
  %514 = right_shift(%513, meta[relay.Constant][83] /* ty=Tensor[(2), int64] */) /* ty=Tensor[(1, 1, 1, 2), int64] */;

LAYER 30
  %515 = cast(3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %516 = cast(%514, dtype="int32") /* ty=Tensor[(1, 1, 1, 2), int32] */;
  %517 = add(%515, %516) /* ty=Tensor[(1, 1, 1, 2), int32] */;
  %518 = clip(%517, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 1, 1, 2), int32] */;
  %519 = cast(%518, dtype="int8") /* ty=Tensor[(1, 1, 1, 2), int8] */;
  %520 = reshape(%519, newshape=[1, 2]) /* ty=Tensor[(1, 2), int8] */;
  %521 = cast(%520, dtype="int32") /* ty=Tensor[(1, 2), int32] */;
  %522 = subtract(%521, 3 /* ty=int32 */) /* ty=Tensor[(1, 2), int32] */;
  %523 = cast(%522, dtype="float32") /* ty=Tensor[(1, 2), float32] */;
  %524 = multiply(%523, 0.00443276f /* ty=float32 */) /* ty=Tensor[(1, 2), float32] */;
  %525 = nn.softmax(%524) /* ty=Tensor[(1, 2), float32] */;
  %526 = divide(%525, 0.00390625f /* ty=float32 */) /* ty=Tensor[(1, 2), float32] */;
  %527 = cast(-128 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %528 = add(%526, %527) /* ty=Tensor[(1, 2), float32] */;
  %529 = clip(%528, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 2), float32] */;
  %530 = round(%529) /* ty=Tensor[(1, 2), float32] */;
  cast(%530, dtype="int8") /* ty=Tensor[(1, 2), int8] */
}
